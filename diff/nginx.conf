# Log notice level and higher (e.g. state cache
# emits useful log messages on notice level).
error_log stderr notice;


# Make env vars accessible from within Lua modules.
env COREOS_PUBLIC_IPV4;
env SECRET_KEY_FILE_PATH;
env AUTH_ERROR_PAGE_DIR_PATH;


events {
    worker_connections 1024;
}


http {
    access_log syslog:server=unix:/dev/log;

    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    # Without this, cosocket-based code in worker
    # initialization cannot resolve leader.mesos.
    resolver 127.0.0.1:61053;

    upstream mesos {
        server leader.mesos:5050;
    }

    upstream marathon {
        server master.mesos:8080;
    }

    upstream dcos_history_service {
        server master.mesos:15055;
    }

    upstream mesos_dns {
        server master.mesos:8123;
    }

    upstream exhibitor {
        server localhost:8181;
    }

    upstream cosmos {
        server localhost:7070;
    }

    upstream bouncer {
        server localhost:8101;
    }

    upstream networking_api {
        server leader.mesos:61430;
    }

    upstream dddt {
        server localhost:1050;
    }

    proxy_cache_path /tmp/nginx-mesos-cache levels=1:2 keys_zone=mesos:1m inactive=10m;

    lua_package_path '$prefix/conf/?.lua;;';
    lua_shared_dict mesos_state_cache 100m;
    lua_shared_dict shmlocks 100k;

    init_worker_by_lua '
        local statecache = require "mesosstatecache"
        statecache.periodically_poll_mesos_state()
    ';

    # Loading the auth module in the global Lua VM in the master process is a
    # requirement, so that code is executed under the user that spawns the
    # master process instead of 'nobody' (which workers operate under).
    init_by_lua '
        local use_auth = os.getenv("ADMINROUTER_ACTIVATE_AUTH_MODULE")
        if use_auth ~= "true" then
            ngx.log(
                ngx.NOTICE,
                "ADMINROUTER_ACTIVATE_AUTH_MODULE not `true`. " ..
                "Use dummy module."
                )
            auth = {}
            auth.validate_jwt_or_exit = function() return end
            auth.check_acl_triple_or_exit = function(x) return end
        else
            ngx.log(ngx.NOTICE, "Use auth module.")
            auth = require "auth"
        end
    ';

    server {
        listen 80 default_server;
        listen 443 ssl spdy default_server;
        ssl_certificate snakeoil.crt;
        ssl_certificate_key snakeoil.key;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        # Ref: https://github.com/cloudflare/sslconfig/blob/master/conf
        # Modulo ChaCha20 cipher.
        ssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
        ssl_prefer_server_ciphers on;

        server_name dcos.*;
        root /opt/mesosphere/active/dcos-ui/usr;

        # ACS integration dev settings.
        #error_log logs/error.log notice;
        #rewrite_log on;
        #lua_code_cache off;

        location /acs/api/v1/auth/ {
            # Bouncer's login and logout endpoints must be freely accessible.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_pass http://bouncer;
        }

        location /acs/api/v1/internal/policyquery {
            # This endpoint answers if action <a> is allowed to be performed by
            # user <u> on resource <r>. <r>, <u>, <a> are transmitted via query
            # parameters. This location does not require authentication. It is
            # meant to serve only trusted (remote) ends. For now, keep it
            # only accessible by nginx' subrequests, via the 'internal' directive.
            # http://nginx.org/en/docs/http/ngx_http_core_module.html#internal
            internal;

            # Do not send original request headers upstream, see
            # https://github.com/openresty/lua-nginx-module#ngxlocationcapture
            proxy_pass_request_headers off;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_pass http://bouncer;
        }

        location /acs/api/v1 {
            # Enforce access restriction to Bouncer's API.
            access_by_lua '
                uid = auth.validate_jwt_or_exit()
                local triple = {
                    uid = uid,
                    rid = "dcos:adminrouter:acs",
                    action = "full"
                    }
                auth.check_acl_triple_or_exit(triple)
            ';
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_pass http://bouncer;
            # Instruct user agent to not cache the response.
            # Ref: http://stackoverflow.com/a/2068407/145400
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma no-cache;
            add_header Expires 0;
        }

        location /bouncer-internal {
            # Allow only requests originating from known Mesos agent IPs.
            access_by_lua 'auth.check_agent_request_or_exit()';
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            # Trailing slash makes location prefix be stripped.
            proxy_pass http://bouncer/;
        }

        location /system/health/v1 {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:system-health")';
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_pass http://dddt;
        }

        location = /mesos {
            rewrite ^/mesos$ $scheme://$http_host/mesos/ permanent;
        }

        location /mesos/ {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:mesos")';
            proxy_set_header Host $http_host;
            proxy_pass http://mesos/;
        }

        location /package/ {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:package")';
            proxy_set_header Host $http_host;
            proxy_pass http://cosmos/package/;
        }

        location /capabilities {
            # Allow for all authenticated users.
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header Host $http_host;
            proxy_pass http://cosmos/capabilities;
        }

        location /cache/master/ {
            add_header X-Cache-Status $upstream_cache_status;
            proxy_pass http://mesos/master/;
            proxy_cache mesos;
            proxy_cache_bypass  $http_cache_control;
            proxy_cache_lock on;
            proxy_cache_valid 200 5s;
        }

        location = /exhibitor {
            rewrite ^/exhibitor$ $scheme://$http_host/exhibitor/ permanent;
        }

        location /exhibitor/ {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:exhibitor")';
            proxy_pass http://exhibitor/;
            proxy_redirect http://$proxy_host/ $scheme://$http_host/exhibitor/;
        }

        location /networking/api/v1/ {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:networking")';
            proxy_set_header Host $http_host;
            # Note: trailing slash needs to remain at the end of networking_api/
            proxy_pass http://networking_api/;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma no-cache;
            add_header Expires 0;
        }

        location ~ ^/slave/(?<slaveid>[0-9a-zA-Z-]+)(?<url>.*)$ {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:slave")';
            set $slaveaddr '';

            more_clear_input_headers Accept-Encoding;
            rewrite ^/slave/[0-9a-zA-Z-]+/.*$ $url break;
            rewrite_by_lua_file conf/slave.lua;

            proxy_set_header        Host $http_host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass http://$slaveaddr;
        }

        location ~ ^/service/(?<serviceid>[0-9a-zA-Z-.]+)$ {
            # Append slash and 301-redirect.
            rewrite ^/service/(.*)$ $scheme://$http_host/service/$1/ permanent;
        }

        location ~ ^/service/(?<serviceid>[0-9a-zA-Z-.]+)/(?<url>.*) {
            set $serviceurl '';
            set $servicescheme '';

            access_by_lua '
                local resourceid = "dcos:adminrouter:service:" .. ngx.var.serviceid
                uid = auth.validate_jwt_or_exit()
                local triple = {
                    uid = uid,
                    rid = resourceid,
                    action = "full"
                    }
                auth.check_acl_triple_or_exit(triple)
            ';

            more_clear_input_headers Accept-Encoding;
            rewrite ^/service/[0-9a-zA-Z-.]+/?.*$ /$url break;
            rewrite_by_lua_file conf/service.lua;

            proxy_set_header        Host $http_host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass $serviceurl;
            proxy_redirect $servicescheme://$host/service/$serviceid/ $scheme://$http_host/service/$serviceid/;
            proxy_redirect $servicescheme://$host/ $scheme://$http_host/service/$serviceid/;
            proxy_redirect / /service/$serviceid/;

            # Disable buffering to allow real-time protocols
            proxy_buffering off;

            # Support web sockets and SPDY upgrades
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /metadata {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:metadata")';
            content_by_lua_file conf/metadata.lua;
        }

        location /dcos-metadata/ui-config.json {
            # Allow non-authed access for the UI.
            alias /opt/mesosphere/etc/ui-config.json;
        }

        location /dcos-metadata/dcos-version.json {
            # Allow non-authed access for the UI.
            alias /opt/mesosphere/active/dcos-metadata/etc/dcos-version.json;
        }

        location /dcos-metadata/ {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:metadata")';
            alias /opt/mesosphere/active/dcos-metadata/etc/;
        }

        # /marathon(/) is a legacy, deprecated location. The
        # officially supported path is /service/marathon(/).
        location = /marathon {
            rewrite ^/marathon$ $scheme://$http_host/marathon/ permanent;
        }

        # TODO(cmaloney): Make the Web UI work in a subdirectory.
        # NOTE(JP): What is the problem here? Is the TODO resolved?
        location /marathon/ {
            # Enforce access restriction. Auth-wise, treat /marathon*
            # equivalently to /service/marathon*.
            access_by_lua '
                uid = auth.validate_jwt_or_exit()
                local triple = {
                    uid = uid,
                    rid = "dcos:adminrouter:service:marathon",
                    action = "full"
                    }
                auth.check_acl_triple_or_exit(triple)
            ';
            proxy_set_header Host $http_host;
            proxy_pass http://marathon/;
        }

        location /pkgpanda/active.buildinfo.full.json {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:metadata")';
            add_header Cache-Control "no-cache";
            alias /opt/mesosphere/active.buildinfo.full.json;
        }

        location /dcos-history-service/ {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:historyservice")';
            proxy_pass http://dcos_history_service/;
        }

        location = /mesos_dns {
            rewrite ^/mesos_dns$ $scheme://$http_host/mesos_dns/ permanent;
        }

        location /mesos_dns/ {
            access_by_lua 'auth.check_acl_or_exit("dcos:adminrouter:ops:mesos-dns")';
            proxy_set_header Host $http_host;
            proxy_pass http://mesos_dns/;
        }
    }
}
